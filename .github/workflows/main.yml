name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually
  workflow_dispatch:

jobs:
  AoC-2018:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up .Net Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      - name: Compile and run AoC 2018
        run: |
          cd 2018
          dotnet tool restore
          dotnet csharpier --check src
          dotnet build -c Release 
          dotnet test bin/Release/net6.0/aoc2018.dll

  AoC-2019:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Compile and run AoC 2019
        run: |
          cd 2019
          ./gradlew check

  AoC-2020:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Compile and run AoC 2020
        run: |
          sudo apt-get install -y libdw-dev libunwind-dev
          cd 2020
          ./build/make.sh
          time ./cmake-build-release/adventofcode

  AoC-2021:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Compile and run AoC 2021
        run: |
          cd 2021
          ./gradlew check

  AoC-2022:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Compile and run AoC 2022
        run: |
          cd 2022
          ./gradlew check

  AoC-2023:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Compile and run AoC 2023
        run: |
          sudo apt-get install -y rustc cargo
          cd 2023
          cargo build --release
          time cargo test --release
